
knob.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003730  08003730  00004730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003768  08003768  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003768  08003768  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003768  08003768  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003768  08003768  00004768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800376c  0800376c  0000476c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003770  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  0800377c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  0800377c  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b3  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ad2  00000000  00000000  000121ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00013cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094d  00000000  00000000  000148a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afcc  00000000  00000000  000151ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee78  00000000  00000000  000301b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2339  00000000  00000000  0003f031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e136a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003184  00000000  00000000  000e13b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000e4534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003718 	.word	0x08003718

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003718 	.word	0x08003718

080001c8 <ApplicationLoop>:

/******************************************************************************
* Function Definitions
*******************************************************************************/
void ApplicationLoop()
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    while (1)
    {
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001d0:	4803      	ldr	r0, [pc, #12]	@ (80001e0 <ApplicationLoop+0x18>)
 80001d2:	f000 fda7 	bl	8000d24 <HAL_GPIO_TogglePin>
        HAL_Delay(100);
 80001d6:	2064      	movs	r0, #100	@ 0x64
 80001d8:	f000 fb10 	bl	80007fc <HAL_Delay>
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001dc:	bf00      	nop
 80001de:	e7f5      	b.n	80001cc <ApplicationLoop+0x4>
 80001e0:	48000400 	.word	0x48000400

080001e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e8:	f000 faa2 	bl	8000730 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ec:	f000 f809 	bl	8000202 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001f0:	f000 f908 	bl	8000404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001f4:	f000 f8d6 	bl	80003a4 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80001f8:	f000 f85a 	bl	80002b0 <MX_TIM17_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ApplicationLoop();
 80001fc:	f7ff ffe4 	bl	80001c8 <ApplicationLoop>
 8000200:	e7fc      	b.n	80001fc <main+0x18>

08000202 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b09c      	sub	sp, #112	@ 0x70
 8000206:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000208:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800020c:	2228      	movs	r2, #40	@ 0x28
 800020e:	2100      	movs	r1, #0
 8000210:	4618      	mov	r0, r3
 8000212:	f003 fa54 	bl	80036be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000216:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000226:	463b      	mov	r3, r7
 8000228:	2234      	movs	r2, #52	@ 0x34
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f003 fa46 	bl	80036be <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000232:	2302      	movs	r3, #2
 8000234:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023a:	2310      	movs	r3, #16
 800023c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023e:	2302      	movs	r3, #2
 8000240:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000246:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800024a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000250:	4618      	mov	r0, r3
 8000252:	f000 fd81 	bl	8000d58 <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800025c:	f000 f93a 	bl	80004d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000270:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800027a:	2102      	movs	r1, #2
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fd79 	bl	8001d74 <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000288:	f000 f924 	bl	80004d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM17;
 800028c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000290:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000292:	2300      	movs	r3, #0
 8000294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000296:	463b      	mov	r3, r7
 8000298:	4618      	mov	r0, r3
 800029a:	f001 ff7d 	bl	8002198 <HAL_RCCEx_PeriphCLKConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80002a4:	f000 f916 	bl	80004d4 <Error_Handler>
  }
}
 80002a8:	bf00      	nop
 80002aa:	3770      	adds	r7, #112	@ 0x70
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}

080002b0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b092      	sub	sp, #72	@ 0x48
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80002b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]
 80002c6:	615a      	str	r2, [r3, #20]
 80002c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80002ca:	463b      	mov	r3, r7
 80002cc:	222c      	movs	r2, #44	@ 0x2c
 80002ce:	2100      	movs	r1, #0
 80002d0:	4618      	mov	r0, r3
 80002d2:	f003 f9f4 	bl	80036be <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80002d6:	4b31      	ldr	r3, [pc, #196]	@ (800039c <MX_TIM17_Init+0xec>)
 80002d8:	4a31      	ldr	r2, [pc, #196]	@ (80003a0 <MX_TIM17_Init+0xf0>)
 80002da:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80002dc:	4b2f      	ldr	r3, [pc, #188]	@ (800039c <MX_TIM17_Init+0xec>)
 80002de:	2200      	movs	r2, #0
 80002e0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e2:	4b2e      	ldr	r3, [pc, #184]	@ (800039c <MX_TIM17_Init+0xec>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80002e8:	4b2c      	ldr	r3, [pc, #176]	@ (800039c <MX_TIM17_Init+0xec>)
 80002ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002ee:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f0:	4b2a      	ldr	r3, [pc, #168]	@ (800039c <MX_TIM17_Init+0xec>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80002f6:	4b29      	ldr	r3, [pc, #164]	@ (800039c <MX_TIM17_Init+0xec>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fc:	4b27      	ldr	r3, [pc, #156]	@ (800039c <MX_TIM17_Init+0xec>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000302:	4826      	ldr	r0, [pc, #152]	@ (800039c <MX_TIM17_Init+0xec>)
 8000304:	f002 f8d8 	bl	80024b8 <HAL_TIM_Base_Init>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800030e:	f000 f8e1 	bl	80004d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000312:	4822      	ldr	r0, [pc, #136]	@ (800039c <MX_TIM17_Init+0xec>)
 8000314:	f002 f927 	bl	8002566 <HAL_TIM_PWM_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800031e:	f000 f8d9 	bl	80004d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000322:	2360      	movs	r3, #96	@ 0x60
 8000324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032a:	2300      	movs	r3, #0
 800032c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800032e:	2300      	movs	r3, #0
 8000330:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000332:	2300      	movs	r3, #0
 8000334:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000336:	2300      	movs	r3, #0
 8000338:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800033a:	2300      	movs	r3, #0
 800033c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800033e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000342:	2200      	movs	r2, #0
 8000344:	4619      	mov	r1, r3
 8000346:	4815      	ldr	r0, [pc, #84]	@ (800039c <MX_TIM17_Init+0xec>)
 8000348:	f002 f96e 	bl	8002628 <HAL_TIM_PWM_ConfigChannel>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000352:	f000 f8bf 	bl	80004d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000356:	2300      	movs	r3, #0
 8000358:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800035e:	2300      	movs	r3, #0
 8000360:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800036a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800036e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	4619      	mov	r1, r3
 800037c:	4807      	ldr	r0, [pc, #28]	@ (800039c <MX_TIM17_Init+0xec>)
 800037e:	f002 fd87 	bl	8002e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000388:	f000 f8a4 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800038c:	4803      	ldr	r0, [pc, #12]	@ (800039c <MX_TIM17_Init+0xec>)
 800038e:	f000 f8eb 	bl	8000568 <HAL_TIM_MspPostInit>

}
 8000392:	bf00      	nop
 8000394:	3748      	adds	r7, #72	@ 0x48
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000028 	.word	0x20000028
 80003a0:	40014800 	.word	0x40014800

080003a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003a8:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003aa:	4a15      	ldr	r2, [pc, #84]	@ (8000400 <MX_USART2_UART_Init+0x5c>)
 80003ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ae:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003b0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003ca:	220c      	movs	r2, #12
 80003cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003dc:	2200      	movs	r2, #0
 80003de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_USART2_UART_Init+0x58>)
 80003e8:	f002 fdca 	bl	8002f80 <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003f2:	f000 f86f 	bl	80004d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000074 	.word	0x20000074
 8000400:	40004400 	.word	0x40004400

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	@ 0x28
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041a:	4b2b      	ldr	r3, [pc, #172]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a2a      	ldr	r2, [pc, #168]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000424:	6153      	str	r3, [r2, #20]
 8000426:	4b28      	ldr	r3, [pc, #160]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800042e:	613b      	str	r3, [r7, #16]
 8000430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000432:	4b25      	ldr	r3, [pc, #148]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a24      	ldr	r2, [pc, #144]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000438:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b22      	ldr	r3, [pc, #136]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044a:	4b1f      	ldr	r3, [pc, #124]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a1e      	ldr	r2, [pc, #120]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b1c      	ldr	r3, [pc, #112]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000462:	4b19      	ldr	r3, [pc, #100]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a18      	ldr	r2, [pc, #96]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b16      	ldr	r3, [pc, #88]	@ (80004c8 <MX_GPIO_Init+0xc4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000480:	4812      	ldr	r0, [pc, #72]	@ (80004cc <MX_GPIO_Init+0xc8>)
 8000482:	f000 fc37 	bl	8000cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800048c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 0314 	add.w	r3, r7, #20
 800049a:	4619      	mov	r1, r3
 800049c:	480c      	ldr	r0, [pc, #48]	@ (80004d0 <MX_GPIO_Init+0xcc>)
 800049e:	f000 fab7 	bl	8000a10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a8:	2301      	movs	r3, #1
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b0:	2300      	movs	r3, #0
 80004b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	4619      	mov	r1, r3
 80004ba:	4804      	ldr	r0, [pc, #16]	@ (80004cc <MX_GPIO_Init+0xc8>)
 80004bc:	f000 faa8 	bl	8000a10 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004c0:	bf00      	nop
 80004c2:	3728      	adds	r7, #40	@ 0x28
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	48000400 	.word	0x48000400
 80004d0:	48000800 	.word	0x48000800

080004d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d8:	b672      	cpsid	i
}
 80004da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <Error_Handler+0x8>

080004e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <HAL_MspInit+0x44>)
 80004e8:	699b      	ldr	r3, [r3, #24]
 80004ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000524 <HAL_MspInit+0x44>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000524 <HAL_MspInit+0x44>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004fe:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <HAL_MspInit+0x44>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <HAL_MspInit+0x44>)
 8000504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000508:	61d3      	str	r3, [r2, #28]
 800050a:	4b06      	ldr	r3, [pc, #24]	@ (8000524 <HAL_MspInit+0x44>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000516:	2007      	movs	r0, #7
 8000518:	f000 fa46 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <HAL_TIM_Base_MspInit+0x38>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d10b      	bne.n	8000552 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_TIM_Base_MspInit+0x3c>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <HAL_TIM_Base_MspInit+0x3c>)
 8000540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b07      	ldr	r3, [pc, #28]	@ (8000564 <HAL_TIM_Base_MspInit+0x3c>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	40014800 	.word	0x40014800
 8000564:	40021000 	.word	0x40021000

08000568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a11      	ldr	r2, [pc, #68]	@ (80005cc <HAL_TIM_MspPostInit+0x64>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d11c      	bne.n	80005c4 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM17_MspPostInit 0 */

    /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <HAL_TIM_MspPostInit+0x68>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	4a10      	ldr	r2, [pc, #64]	@ (80005d0 <HAL_TIM_MspPostInit+0x68>)
 8000590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000594:	6153      	str	r3, [r2, #20]
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <HAL_TIM_MspPostInit+0x68>)
 8000598:	695b      	ldr	r3, [r3, #20]
 800059a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PA7     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = PWM1_Pin;
 80005a2:	2380      	movs	r3, #128	@ 0x80
 80005a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a6:	2302      	movs	r3, #2
 80005a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM1_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	4619      	mov	r1, r3
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005c0:	f000 fa26 	bl	8000a10 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40014800 	.word	0x40014800
 80005d0:	40021000 	.word	0x40021000

080005d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <HAL_UART_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d128      	bne.n	8000648 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <HAL_UART_MspInit+0x80>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4a16      	ldr	r2, [pc, #88]	@ (8000654 <HAL_UART_MspInit+0x80>)
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000600:	61d3      	str	r3, [r2, #28]
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_UART_MspInit+0x80>)
 8000604:	69db      	ldr	r3, [r3, #28]
 8000606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <HAL_UART_MspInit+0x80>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <HAL_UART_MspInit+0x80>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <HAL_UART_MspInit+0x80>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000626:	230c      	movs	r3, #12
 8000628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000636:	2307      	movs	r3, #7
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4619      	mov	r1, r3
 8000640:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000644:	f000 f9e4 	bl	8000a10 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000648:	bf00      	nop
 800064a:	3728      	adds	r7, #40	@ 0x28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40004400 	.word	0x40004400
 8000654:	40021000 	.word	0x40021000

08000658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <NMI_Handler+0x4>

08000660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <HardFault_Handler+0x4>

08000668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <MemManage_Handler+0x4>

08000670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <BusFault_Handler+0x4>

08000678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <UsageFault_Handler+0x4>

08000680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr

0800068e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ae:	f000 f885 	bl	80007bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006bc:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <SystemInit+0x20>)
 80006be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <SystemInit+0x20>)
 80006c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000714 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e0:	f7ff ffea 	bl	80006b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	@ (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f002 ffe1 	bl	80036d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800070e:	f7ff fd69 	bl	80001e4 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000720:	08003770 	.word	0x08003770
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000728:	20000100 	.word	0x20000100

0800072c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_IRQHandler>
	...

08000730 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <HAL_Init+0x28>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a07      	ldr	r2, [pc, #28]	@ (8000758 <HAL_Init+0x28>)
 800073a:	f043 0310 	orr.w	r3, r3, #16
 800073e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000740:	2003      	movs	r0, #3
 8000742:	f000 f931 	bl	80009a8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f808 	bl	800075c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800074c:	f7ff fec8 	bl	80004e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40022000 	.word	0x40022000

0800075c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_InitTick+0x54>)
 8000766:	681a      	ldr	r2, [r3, #0]
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_InitTick+0x58>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	4619      	mov	r1, r3
 800076e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000772:	fbb3 f3f1 	udiv	r3, r3, r1
 8000776:	fbb2 f3f3 	udiv	r3, r2, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f93b 	bl	80009f6 <HAL_SYSTICK_Config>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000786:	2301      	movs	r3, #1
 8000788:	e00e      	b.n	80007a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d80a      	bhi.n	80007a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000790:	2200      	movs	r2, #0
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f000 f911 	bl	80009be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800079c:	4a06      	ldr	r2, [pc, #24]	@ (80007b8 <HAL_InitTick+0x5c>)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e000      	b.n	80007a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000008 	.word	0x20000008
 80007b8:	20000004 	.word	0x20000004

080007bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_IncTick+0x20>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_IncTick+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4413      	add	r3, r2
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_IncTick+0x24>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000008 	.word	0x20000008
 80007e0:	200000fc 	.word	0x200000fc

080007e4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_GetTick+0x14>)
 80007ea:	681b      	ldr	r3, [r3, #0]
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	200000fc 	.word	0x200000fc

080007fc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff ffee 	bl	80007e4 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffde 	bl	80007e4 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	@ (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	@ 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	@ 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000974:	d301      	bcc.n	800097a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000976:	2301      	movs	r3, #1
 8000978:	e00f      	b.n	800099a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <SysTick_Config+0x40>)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000982:	210f      	movs	r1, #15
 8000984:	f04f 30ff 	mov.w	r0, #4294967295
 8000988:	f7ff ff8e 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	@ (80009a4 <SysTick_Config+0x40>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	@ (80009a4 <SysTick_Config+0x40>)
 8000994:	2207      	movs	r2, #7
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ff47 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b086      	sub	sp, #24
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	60b9      	str	r1, [r7, #8]
 80009c8:	607a      	str	r2, [r7, #4]
 80009ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009d0:	f7ff ff5c 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	6978      	ldr	r0, [r7, #20]
 80009dc:	f7ff ff8e 	bl	80008fc <NVIC_EncodePriority>
 80009e0:	4602      	mov	r2, r0
 80009e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff5d 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b082      	sub	sp, #8
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff ffb0 	bl	8000964 <SysTick_Config>
 8000a04:	4603      	mov	r3, r0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e14e      	b.n	8000cbe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	2101      	movs	r1, #1
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 8140 	beq.w	8000cb8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f003 0303 	and.w	r3, r3, #3
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d005      	beq.n	8000a50 <HAL_GPIO_Init+0x40>
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f003 0303 	and.w	r3, r3, #3
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d130      	bne.n	8000ab2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	43db      	mvns	r3, r3
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4013      	ands	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a86:	2201      	movs	r2, #1
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	091b      	lsrs	r3, r3, #4
 8000a9c:	f003 0201 	and.w	r2, r3, #1
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 0303 	and.w	r3, r3, #3
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d017      	beq.n	8000aee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	2203      	movs	r2, #3
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	d123      	bne.n	8000b42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	08da      	lsrs	r2, r3, #3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3208      	adds	r2, #8
 8000b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	220f      	movs	r2, #15
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	691a      	ldr	r2, [r3, #16]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f003 0307 	and.w	r3, r3, #7
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	08da      	lsrs	r2, r3, #3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3208      	adds	r2, #8
 8000b3c:	6939      	ldr	r1, [r7, #16]
 8000b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43db      	mvns	r3, r3
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	4013      	ands	r3, r2
 8000b58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 0203 	and.w	r2, r3, #3
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f000 809a 	beq.w	8000cb8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b84:	4b55      	ldr	r3, [pc, #340]	@ (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a54      	ldr	r2, [pc, #336]	@ (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b52      	ldr	r3, [pc, #328]	@ (8000cdc <HAL_GPIO_Init+0x2cc>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b9c:	4a50      	ldr	r2, [pc, #320]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	3302      	adds	r3, #2
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f003 0303 	and.w	r3, r3, #3
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bc6:	d013      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e0>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a46      	ldr	r2, [pc, #280]	@ (8000ce4 <HAL_GPIO_Init+0x2d4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d00d      	beq.n	8000bec <HAL_GPIO_Init+0x1dc>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a45      	ldr	r2, [pc, #276]	@ (8000ce8 <HAL_GPIO_Init+0x2d8>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_GPIO_Init+0x1d8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a44      	ldr	r2, [pc, #272]	@ (8000cec <HAL_GPIO_Init+0x2dc>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d101      	bne.n	8000be4 <HAL_GPIO_Init+0x1d4>
 8000be0:	2303      	movs	r3, #3
 8000be2:	e006      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000be4:	2305      	movs	r3, #5
 8000be6:	e004      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000be8:	2302      	movs	r3, #2
 8000bea:	e002      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000bec:	2301      	movs	r3, #1
 8000bee:	e000      	b.n	8000bf2 <HAL_GPIO_Init+0x1e2>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	697a      	ldr	r2, [r7, #20]
 8000bf4:	f002 0203 	and.w	r2, r2, #3
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	4093      	lsls	r3, r2
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c02:	4937      	ldr	r1, [pc, #220]	@ (8000ce0 <HAL_GPIO_Init+0x2d0>)
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	089b      	lsrs	r3, r3, #2
 8000c08:	3302      	adds	r3, #2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c10:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c34:	4a2e      	ldr	r2, [pc, #184]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d003      	beq.n	8000c5e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c5e:	4a24      	ldr	r2, [pc, #144]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c88:	4a19      	ldr	r2, [pc, #100]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	@ (8000cf0 <HAL_GPIO_Init+0x2e0>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	f47f aea9 	bne.w	8000a20 <HAL_GPIO_Init+0x10>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
 8000cd2:	371c      	adds	r7, #28
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010000 	.word	0x40010000
 8000ce4:	48000400 	.word	0x48000400
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	48000c00 	.word	0x48000c00
 8000cf0:	40010400 	.word	0x40010400

08000cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
 8000d00:	4613      	mov	r3, r2
 8000d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d04:	787b      	ldrb	r3, [r7, #1]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d0a:	887a      	ldrh	r2, [r7, #2]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d10:	e002      	b.n	8000d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d12:	887a      	ldrh	r2, [r7, #2]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d36:	887a      	ldrh	r2, [r7, #2]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	041a      	lsls	r2, r3, #16
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43d9      	mvns	r1, r3
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	400b      	ands	r3, r1
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d64:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d68:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f000 bff4 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 816d 	beq.w	800106e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d94:	4bb4      	ldr	r3, [pc, #720]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 030c 	and.w	r3, r3, #12
 8000d9c:	2b04      	cmp	r3, #4
 8000d9e:	d00c      	beq.n	8000dba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da0:	4bb1      	ldr	r3, [pc, #708]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 030c 	and.w	r3, r3, #12
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d157      	bne.n	8000e5c <HAL_RCC_OscConfig+0x104>
 8000dac:	4bae      	ldr	r3, [pc, #696]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000db8:	d150      	bne.n	8000e5c <HAL_RCC_OscConfig+0x104>
 8000dba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dbe:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dc2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000dc6:	fa93 f3a3 	rbit	r3, r3
 8000dca:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd2:	fab3 f383 	clz	r3, r3
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b3f      	cmp	r3, #63	@ 0x3f
 8000dda:	d802      	bhi.n	8000de2 <HAL_RCC_OscConfig+0x8a>
 8000ddc:	4ba2      	ldr	r3, [pc, #648]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	e015      	b.n	8000e0e <HAL_RCC_OscConfig+0xb6>
 8000de2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dea:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000dee:	fa93 f3a3 	rbit	r3, r3
 8000df2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000df6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dfa:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000dfe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000e02:	fa93 f3a3 	rbit	r3, r3
 8000e06:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000e0a:	4b97      	ldr	r3, [pc, #604]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e12:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000e16:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000e1a:	fa92 f2a2 	rbit	r2, r2
 8000e1e:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000e22:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000e26:	fab2 f282 	clz	r2, r2
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	f042 0220 	orr.w	r2, r2, #32
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	f002 021f 	and.w	r2, r2, #31
 8000e36:	2101      	movs	r1, #1
 8000e38:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8114 	beq.w	800106c <HAL_RCC_OscConfig+0x314>
 8000e44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e48:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f040 810b 	bne.w	800106c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	f000 bf85 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e6c:	d106      	bne.n	8000e7c <HAL_RCC_OscConfig+0x124>
 8000e6e:	4b7e      	ldr	r3, [pc, #504]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a7d      	ldr	r2, [pc, #500]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e036      	b.n	8000eea <HAL_RCC_OscConfig+0x192>
 8000e7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000e80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d10c      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x14e>
 8000e8c:	4b76      	ldr	r3, [pc, #472]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a75      	ldr	r2, [pc, #468]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	4b73      	ldr	r3, [pc, #460]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a72      	ldr	r2, [pc, #456]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e021      	b.n	8000eea <HAL_RCC_OscConfig+0x192>
 8000ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eaa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb6:	d10c      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x17a>
 8000eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a6a      	ldr	r2, [pc, #424]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	4b68      	ldr	r3, [pc, #416]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a67      	ldr	r2, [pc, #412]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000eca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	e00b      	b.n	8000eea <HAL_RCC_OscConfig+0x192>
 8000ed2:	4b65      	ldr	r3, [pc, #404]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a64      	ldr	r2, [pc, #400]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000ed8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b62      	ldr	r3, [pc, #392]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a61      	ldr	r2, [pc, #388]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000ee4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eea:	4b5f      	ldr	r3, [pc, #380]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eee:	f023 020f 	bic.w	r2, r3, #15
 8000ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ef6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	495a      	ldr	r1, [pc, #360]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000f08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d054      	beq.n	8000fbe <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f14:	f7ff fc66 	bl	80007e4 <HAL_GetTick>
 8000f18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	e00a      	b.n	8000f34 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f1e:	f7ff fc61 	bl	80007e4 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	@ 0x64
 8000f2c:	d902      	bls.n	8000f34 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	f000 bf19 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
 8000f34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f38:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000f40:	fa93 f3a3 	rbit	r3, r3
 8000f44:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000f48:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4c:	fab3 f383 	clz	r3, r3
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f54:	d802      	bhi.n	8000f5c <HAL_RCC_OscConfig+0x204>
 8000f56:	4b44      	ldr	r3, [pc, #272]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	e015      	b.n	8000f88 <HAL_RCC_OscConfig+0x230>
 8000f5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000f68:	fa93 f3a3 	rbit	r3, r3
 8000f6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000f70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000f78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000f84:	4b38      	ldr	r3, [pc, #224]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8000f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000f90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000f94:	fa92 f2a2 	rbit	r2, r2
 8000f98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000f9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	f042 0220 	orr.w	r2, r2, #32
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	f002 021f 	and.w	r2, r2, #31
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0b0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1c6>
 8000fbc:	e057      	b.n	800106e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fc11 	bl	80007e4 <HAL_GetTick>
 8000fc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	e00a      	b.n	8000fde <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fc0c 	bl	80007e4 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b64      	cmp	r3, #100	@ 0x64
 8000fd6:	d902      	bls.n	8000fde <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	f000 bec4 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
 8000fde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000fe2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fe6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000fea:	fa93 f3a3 	rbit	r3, r3
 8000fee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000ff2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ffe:	d802      	bhi.n	8001006 <HAL_RCC_OscConfig+0x2ae>
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	e015      	b.n	8001032 <HAL_RCC_OscConfig+0x2da>
 8001006:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800100a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001012:	fa93 f3a3 	rbit	r3, r3
 8001016:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800101a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800101e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001022:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800102e:	4b0e      	ldr	r3, [pc, #56]	@ (8001068 <HAL_RCC_OscConfig+0x310>)
 8001030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001032:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001036:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800103a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800103e:	fa92 f2a2 	rbit	r2, r2
 8001042:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001046:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800104a:	fab2 f282 	clz	r2, r2
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	f042 0220 	orr.w	r2, r2, #32
 8001054:	b2d2      	uxtb	r2, r2
 8001056:	f002 021f 	and.w	r2, r2, #31
 800105a:	2101      	movs	r1, #1
 800105c:	fa01 f202 	lsl.w	r2, r1, r2
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1b0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x270>
 8001066:	e002      	b.n	800106e <HAL_RCC_OscConfig+0x316>
 8001068:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001072:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 816c 	beq.w	800135c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001084:	4bcc      	ldr	r3, [pc, #816]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001090:	4bc9      	ldr	r3, [pc, #804]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d16d      	bne.n	8001178 <HAL_RCC_OscConfig+0x420>
 800109c:	4bc6      	ldr	r3, [pc, #792]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d167      	bne.n	8001178 <HAL_RCC_OscConfig+0x420>
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80010ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80010c6:	d802      	bhi.n	80010ce <HAL_RCC_OscConfig+0x376>
 80010c8:	4bbb      	ldr	r3, [pc, #748]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	e013      	b.n	80010f6 <HAL_RCC_OscConfig+0x39e>
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80010d8:	fa93 f3a3 	rbit	r3, r3
 80010dc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80010e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80010ea:	fa93 f3a3 	rbit	r3, r3
 80010ee:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80010f2:	4bb1      	ldr	r3, [pc, #708]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f6:	2202      	movs	r2, #2
 80010f8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80010fc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001100:	fa92 f2a2 	rbit	r2, r2
 8001104:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001108:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800110c:	fab2 f282 	clz	r2, r2
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	f042 0220 	orr.w	r2, r2, #32
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	f002 021f 	and.w	r2, r2, #31
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	4013      	ands	r3, r2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00a      	beq.n	800113e <HAL_RCC_OscConfig+0x3e6>
 8001128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800112c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d002      	beq.n	800113e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	f000 be14 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113e:	4b9e      	ldr	r3, [pc, #632]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800114a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	21f8      	movs	r1, #248	@ 0xf8
 8001154:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001158:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800115c:	fa91 f1a1 	rbit	r1, r1
 8001160:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001164:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001168:	fab1 f181 	clz	r1, r1
 800116c:	b2c9      	uxtb	r1, r1
 800116e:	408b      	lsls	r3, r1
 8001170:	4991      	ldr	r1, [pc, #580]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001172:	4313      	orrs	r3, r2
 8001174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001176:	e0f1      	b.n	800135c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001178:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800117c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	f000 8083 	beq.w	8001290 <HAL_RCC_OscConfig+0x538>
 800118a:	2301      	movs	r3, #1
 800118c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001190:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001194:	fa93 f3a3 	rbit	r3, r3
 8001198:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800119c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a0:	fab3 f383 	clz	r3, r3
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80011aa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	461a      	mov	r2, r3
 80011b2:	2301      	movs	r3, #1
 80011b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b6:	f7ff fb15 	bl	80007e4 <HAL_GetTick>
 80011ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c0:	f7ff fb10 	bl	80007e4 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d902      	bls.n	80011d6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f000 bdc8 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
 80011d6:	2302      	movs	r3, #2
 80011d8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80011e8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	fab3 f383 	clz	r3, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80011f4:	d802      	bhi.n	80011fc <HAL_RCC_OscConfig+0x4a4>
 80011f6:	4b70      	ldr	r3, [pc, #448]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	e013      	b.n	8001224 <HAL_RCC_OscConfig+0x4cc>
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800120e:	2302      	movs	r3, #2
 8001210:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001214:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001220:	4b65      	ldr	r3, [pc, #404]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	2202      	movs	r2, #2
 8001226:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800122a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800122e:	fa92 f2a2 	rbit	r2, r2
 8001232:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001236:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800123a:	fab2 f282 	clz	r2, r2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f042 0220 	orr.w	r2, r2, #32
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	f002 021f 	and.w	r2, r2, #31
 800124a:	2101      	movs	r1, #1
 800124c:	fa01 f202 	lsl.w	r2, r1, r2
 8001250:	4013      	ands	r3, r2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0b4      	beq.n	80011c0 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b58      	ldr	r3, [pc, #352]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800125e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	21f8      	movs	r1, #248	@ 0xf8
 800126c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001274:	fa91 f1a1 	rbit	r1, r1
 8001278:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800127c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001280:	fab1 f181 	clz	r1, r1
 8001284:	b2c9      	uxtb	r1, r1
 8001286:	408b      	lsls	r3, r1
 8001288:	494b      	ldr	r1, [pc, #300]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
 800128e:	e065      	b.n	800135c <HAL_RCC_OscConfig+0x604>
 8001290:	2301      	movs	r3, #1
 8001292:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80012a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012b0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	461a      	mov	r2, r3
 80012b8:	2300      	movs	r3, #0
 80012ba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fa92 	bl	80007e4 <HAL_GetTick>
 80012c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c4:	e00a      	b.n	80012dc <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c6:	f7ff fa8d 	bl	80007e4 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d902      	bls.n	80012dc <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	f000 bd45 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80012ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80012fa:	d802      	bhi.n	8001302 <HAL_RCC_OscConfig+0x5aa>
 80012fc:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	e013      	b.n	800132a <HAL_RCC_OscConfig+0x5d2>
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001314:	2302      	movs	r3, #2
 8001316:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800131a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800131e:	fa93 f3a3 	rbit	r3, r3
 8001322:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x660>)
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	2202      	movs	r2, #2
 800132c:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001330:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001334:	fa92 f2a2 	rbit	r2, r2
 8001338:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800133c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001340:	fab2 f282 	clz	r2, r2
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	f042 0220 	orr.w	r2, r2, #32
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	f002 021f 	and.w	r2, r2, #31
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1b4      	bne.n	80012c6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001360:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0308 	and.w	r3, r3, #8
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 8115 	beq.w	800159c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d07e      	beq.n	8001480 <HAL_RCC_OscConfig+0x728>
 8001382:	2301      	movs	r3, #1
 8001384:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001388:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001398:	fab3 f383 	clz	r3, r3
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_RCC_OscConfig+0x664>)
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	461a      	mov	r2, r3
 80013a8:	2301      	movs	r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ac:	f7ff fa1a 	bl	80007e4 <HAL_GetTick>
 80013b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b4:	e00f      	b.n	80013d6 <HAL_RCC_OscConfig+0x67e>
 80013b6:	bf00      	nop
 80013b8:	40021000 	.word	0x40021000
 80013bc:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fa10 	bl	80007e4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d902      	bls.n	80013d6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f000 bcc8 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80013e0:	fa93 f3a3 	rbit	r3, r3
 80013e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013f0:	2202      	movs	r2, #2
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	fa93 f2a3 	rbit	r2, r3
 8001402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800141c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	fa93 f2a3 	rbit	r2, r3
 8001426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800142a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800142e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001430:	4bb0      	ldr	r3, [pc, #704]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001438:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800143c:	2102      	movs	r1, #2
 800143e:	6019      	str	r1, [r3, #0]
 8001440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001444:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f1a3 	rbit	r1, r3
 800144e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001452:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001456:	6019      	str	r1, [r3, #0]
  return result;
 8001458:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800145c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fab3 f383 	clz	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	2101      	movs	r1, #1
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0a0      	beq.n	80013c0 <HAL_RCC_OscConfig+0x668>
 800147e:	e08d      	b.n	800159c <HAL_RCC_OscConfig+0x844>
 8001480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001484:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001490:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	fa93 f2a3 	rbit	r2, r3
 800149a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800149e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014a2:	601a      	str	r2, [r3, #0]
  return result;
 80014a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80014ac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b90      	ldr	r3, [pc, #576]	@ (80016f8 <HAL_RCC_OscConfig+0x9a0>)
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	461a      	mov	r2, r3
 80014be:	2300      	movs	r3, #0
 80014c0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c2:	f7ff f98f 	bl	80007e4 <HAL_GetTick>
 80014c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00a      	b.n	80014e2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff f98a 	bl	80007e4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d902      	bls.n	80014e2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	f000 bc42 	b.w	8001d66 <HAL_RCC_OscConfig+0x100e>
 80014e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014ea:	2202      	movs	r2, #2
 80014ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	fa93 f2a3 	rbit	r2, r3
 80014fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001500:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800150e:	2202      	movs	r2, #2
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001516:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001524:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800152e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800153a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001548:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800154c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154e:	4b69      	ldr	r3, [pc, #420]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001556:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800155a:	2102      	movs	r1, #2
 800155c:	6019      	str	r1, [r3, #0]
 800155e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001562:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fa93 f1a3 	rbit	r1, r3
 800156c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001570:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001574:	6019      	str	r1, [r3, #0]
  return result;
 8001576:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800157a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f303 	lsl.w	r3, r1, r3
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d197      	bne.n	80014cc <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 819e 	beq.w	80018ee <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b8:	4b4e      	ldr	r3, [pc, #312]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d116      	bne.n	80015f2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	4b4b      	ldr	r3, [pc, #300]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	4a4a      	ldr	r2, [pc, #296]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80015ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ce:	61d3      	str	r3, [r2, #28]
 80015d0:	4b48      	ldr	r3, [pc, #288]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80015d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015dc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80015ea:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f2:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <HAL_RCC_OscConfig+0x9a4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fe:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <HAL_RCC_OscConfig+0x9a4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a3e      	ldr	r2, [pc, #248]	@ (80016fc <HAL_RCC_OscConfig+0x9a4>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160a:	f7ff f8eb 	bl	80007e4 <HAL_GetTick>
 800160e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001612:	e009      	b.n	8001628 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001614:	f7ff f8e6 	bl	80007e4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	@ 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e39e      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <HAL_RCC_OscConfig+0x9a4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0ef      	beq.n	8001614 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001638:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d106      	bne.n	8001652 <HAL_RCC_OscConfig+0x8fa>
 8001644:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4a2a      	ldr	r2, [pc, #168]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6213      	str	r3, [r2, #32]
 8001650:	e035      	b.n	80016be <HAL_RCC_OscConfig+0x966>
 8001652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001656:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10c      	bne.n	800167c <HAL_RCC_OscConfig+0x924>
 8001662:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a23      	ldr	r2, [pc, #140]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	6213      	str	r3, [r2, #32]
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	4a20      	ldr	r2, [pc, #128]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	6213      	str	r3, [r2, #32]
 800167a:	e020      	b.n	80016be <HAL_RCC_OscConfig+0x966>
 800167c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001680:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b05      	cmp	r3, #5
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x94e>
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a18      	ldr	r2, [pc, #96]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 8001692:	f043 0304 	orr.w	r3, r3, #4
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4a15      	ldr	r2, [pc, #84]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0x966>
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a12      	ldr	r2, [pc, #72]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4a0f      	ldr	r2, [pc, #60]	@ (80016f4 <HAL_RCC_OscConfig+0x99c>)
 80016b8:	f023 0304 	bic.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8087 	beq.w	80017de <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d0:	f7ff f888 	bl	80007e4 <HAL_GetTick>
 80016d4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	e012      	b.n	8001700 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff f883 	bl	80007e4 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d908      	bls.n	8001700 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e339      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
 80016f2:	bf00      	nop
 80016f4:	40021000 	.word	0x40021000
 80016f8:	10908120 	.word	0x10908120
 80016fc:	40007000 	.word	0x40007000
 8001700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001704:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001710:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fa93 f2a3 	rbit	r2, r3
 800171a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800171e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001728:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001734:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	fa93 f2a3 	rbit	r2, r3
 800173e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001742:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001746:	601a      	str	r2, [r3, #0]
  return result;
 8001748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800174c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001750:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001752:	fab3 f383 	clz	r3, r3
 8001756:	b2db      	uxtb	r3, r3
 8001758:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d102      	bne.n	8001768 <HAL_RCC_OscConfig+0xa10>
 8001762:	4b98      	ldr	r3, [pc, #608]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	e013      	b.n	8001790 <HAL_RCC_OscConfig+0xa38>
 8001768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800176c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001770:	2202      	movs	r2, #2
 8001772:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001778:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fa93 f2a3 	rbit	r2, r3
 8001782:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001786:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	4b8d      	ldr	r3, [pc, #564]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001794:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001798:	2102      	movs	r1, #2
 800179a:	6011      	str	r1, [r2, #0]
 800179c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017a0:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80017a4:	6812      	ldr	r2, [r2, #0]
 80017a6:	fa92 f1a2 	rbit	r1, r2
 80017aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017ae:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017b2:	6011      	str	r1, [r2, #0]
  return result;
 80017b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80017b8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	fab2 f282 	clz	r2, r2
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f002 021f 	and.w	r2, r2, #31
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f202 	lsl.w	r2, r1, r2
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f43f af7f 	beq.w	80016da <HAL_RCC_OscConfig+0x982>
 80017dc:	e07d      	b.n	80018da <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff f801 	bl	80007e4 <HAL_GetTick>
 80017e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017e8:	f7fe fffc 	bl	80007e4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e2b2      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
 8001800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001804:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001808:	2202      	movs	r2, #2
 800180a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001810:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	fa93 f2a3 	rbit	r2, r3
 800181a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001828:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800182c:	2202      	movs	r2, #2
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001834:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	fa93 f2a3 	rbit	r2, r3
 800183e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001842:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001846:	601a      	str	r2, [r3, #0]
  return result;
 8001848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001850:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	fab3 f383 	clz	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d102      	bne.n	8001868 <HAL_RCC_OscConfig+0xb10>
 8001862:	4b58      	ldr	r3, [pc, #352]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	e013      	b.n	8001890 <HAL_RCC_OscConfig+0xb38>
 8001868:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001870:	2202      	movs	r2, #2
 8001872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001878:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	fa93 f2a3 	rbit	r2, r3
 8001882:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001886:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	4b4d      	ldr	r3, [pc, #308]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001890:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001894:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001898:	2102      	movs	r1, #2
 800189a:	6011      	str	r1, [r2, #0]
 800189c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018a0:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	fa92 f1a2 	rbit	r1, r2
 80018aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018ae:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018b2:	6011      	str	r1, [r2, #0]
  return result;
 80018b4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018b8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	fab2 f282 	clz	r2, r2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f002 021f 	and.w	r2, r2, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d186      	bne.n	80017e8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018da:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d105      	bne.n	80018ee <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a37      	ldr	r2, [pc, #220]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 80018e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8232 	beq.w	8001d64 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	f000 8201 	beq.w	8001d10 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001912:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	2b02      	cmp	r3, #2
 800191c:	f040 8157 	bne.w	8001bce <HAL_RCC_OscConfig+0xe76>
 8001920:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001924:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001928:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800192c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001932:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	fa93 f2a3 	rbit	r2, r3
 800193c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001940:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001944:	601a      	str	r2, [r3, #0]
  return result;
 8001946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800194a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800194e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	fab3 f383 	clz	r3, r3
 8001954:	b2db      	uxtb	r3, r3
 8001956:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800195a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	461a      	mov	r2, r3
 8001962:	2300      	movs	r3, #0
 8001964:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7fe ff3d 	bl	80007e4 <HAL_GetTick>
 800196a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196e:	e009      	b.n	8001984 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7fe ff38 	bl	80007e4 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1f0      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
 8001984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001988:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800198c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001996:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019a8:	601a      	str	r2, [r3, #0]
  return result;
 80019aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80019b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80019bc:	d804      	bhi.n	80019c8 <HAL_RCC_OscConfig+0xc70>
 80019be:	4b01      	ldr	r3, [pc, #4]	@ (80019c4 <HAL_RCC_OscConfig+0xc6c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e029      	b.n	8001a18 <HAL_RCC_OscConfig+0xcc0>
 80019c4:	40021000 	.word	0x40021000
 80019c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019cc:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019da:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80019f6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	4bc3      	ldr	r3, [pc, #780]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a1c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a20:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a24:	6011      	str	r1, [r2, #0]
 8001a26:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a2a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	fa92 f1a2 	rbit	r1, r2
 8001a34:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a38:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a3c:	6011      	str	r1, [r2, #0]
  return result;
 8001a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a42:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f002 021f 	and.w	r2, r2, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d185      	bne.n	8001970 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4baf      	ldr	r3, [pc, #700]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001a78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	430b      	orrs	r3, r1
 8001a86:	49a7      	ldr	r1, [pc, #668]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	fa93 f2a3 	rbit	r2, r3
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ab0:	601a      	str	r2, [r3, #0]
  return result;
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001aba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ac6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	461a      	mov	r2, r3
 8001ace:	2301      	movs	r3, #1
 8001ad0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fe87 	bl	80007e4 <HAL_GetTick>
 8001ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ada:	e009      	b.n	8001af0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7fe fe82 	bl	80007e4 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e13a      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001afc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	fa93 f2a3 	rbit	r2, r3
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b14:	601a      	str	r2, [r3, #0]
  return result;
 8001b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001b1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	fab3 f383 	clz	r3, r3
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b28:	d802      	bhi.n	8001b30 <HAL_RCC_OscConfig+0xdd8>
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	e027      	b.n	8001b80 <HAL_RCC_OscConfig+0xe28>
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4b69      	ldr	r3, [pc, #420]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b84:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b88:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b92:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fa92 f1a2 	rbit	r1, r2
 8001b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001ba4:	6011      	str	r1, [r2, #0]
  return result;
 8001ba6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001baa:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f002 021f 	and.w	r2, r2, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d087      	beq.n	8001adc <HAL_RCC_OscConfig+0xd84>
 8001bcc:	e0ca      	b.n	8001d64 <HAL_RCC_OscConfig+0x100c>
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001bd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bf2:	601a      	str	r2, [r3, #0]
  return result;
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001bfc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfe:	fab3 f383 	clz	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	461a      	mov	r2, r3
 8001c10:	2300      	movs	r3, #0
 8001c12:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe fde6 	bl	80007e4 <HAL_GetTick>
 8001c18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7fe fde1 	bl	80007e4 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e099      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
 8001c32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c36:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c44:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c56:	601a      	str	r2, [r3, #0]
  return result;
 8001c58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001c60:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c6a:	d802      	bhi.n	8001c72 <HAL_RCC_OscConfig+0xf1a>
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	e027      	b.n	8001cc2 <HAL_RCC_OscConfig+0xf6a>
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c92:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001ca0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001caa:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	fa93 f2a3 	rbit	r2, r3
 8001cb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001cbc:	601a      	str	r2, [r3, #0]
 8001cbe:	4b19      	ldr	r3, [pc, #100]	@ (8001d24 <HAL_RCC_OscConfig+0xfcc>)
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cc6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001cce:	6011      	str	r1, [r2, #0]
 8001cd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cd4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	fa92 f1a2 	rbit	r1, r2
 8001cde:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ce2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ce6:	6011      	str	r1, [r2, #0]
  return result;
 8001ce8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cec:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	fab2 f282 	clz	r2, r2
 8001cf6:	b2d2      	uxtb	r2, r2
 8001cf8:	f042 0220 	orr.w	r2, r2, #32
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	f002 021f 	and.w	r2, r2, #31
 8001d02:	2101      	movs	r1, #1
 8001d04:	fa01 f202 	lsl.w	r2, r1, r2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d187      	bne.n	8001c1e <HAL_RCC_OscConfig+0xec6>
 8001d0e:	e029      	b.n	8001d64 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d103      	bne.n	8001d28 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e020      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
 8001d24:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_RCC_OscConfig+0x1018>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d30:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d34:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10b      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d48:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001d4c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d001      	beq.n	8001d64 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000

08001d74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b09e      	sub	sp, #120	@ 0x78
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e154      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b89      	ldr	r3, [pc, #548]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d910      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b86      	ldr	r3, [pc, #536]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 0207 	bic.w	r2, r3, #7
 8001da2:	4984      	ldr	r1, [pc, #528]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b82      	ldr	r3, [pc, #520]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e13c      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc8:	4b7b      	ldr	r3, [pc, #492]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4978      	ldr	r1, [pc, #480]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 80cd 	beq.w	8001f82 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d137      	bne.n	8001e60 <HAL_RCC_ClockConfig+0xec>
 8001df0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001df8:	fa93 f3a3 	rbit	r3, r3
 8001dfc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e08:	d802      	bhi.n	8001e10 <HAL_RCC_ClockConfig+0x9c>
 8001e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	e00f      	b.n	8001e30 <HAL_RCC_ClockConfig+0xbc>
 8001e10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e18:	fa93 f3a3 	rbit	r3, r3
 8001e1c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e26:	fa93 f3a3 	rbit	r3, r3
 8001e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e2c:	4b62      	ldr	r3, [pc, #392]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001e36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e38:	fa92 f2a2 	rbit	r2, r2
 8001e3c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001e3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e40:	fab2 f282 	clz	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f042 0220 	orr.w	r2, r2, #32
 8001e4a:	b2d2      	uxtb	r2, r2
 8001e4c:	f002 021f 	and.w	r2, r2, #31
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	4013      	ands	r3, r2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d171      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e0ea      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d137      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x164>
 8001e68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	fab3 f383 	clz	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e80:	d802      	bhi.n	8001e88 <HAL_RCC_ClockConfig+0x114>
 8001e82:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCC_ClockConfig+0x134>
 8001e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e90:	fa93 f3a3 	rbit	r3, r3
 8001e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e9e:	fa93 f3a3 	rbit	r3, r3
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ea4:	4b44      	ldr	r3, [pc, #272]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eac:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001eb0:	fa92 f2a2 	rbit	r2, r2
 8001eb4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001eb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eb8:	fab2 f282 	clz	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f042 0220 	orr.w	r2, r2, #32
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f002 021f 	and.w	r2, r2, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d135      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0ae      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b3f      	cmp	r3, #63	@ 0x3f
 8001eee:	d802      	bhi.n	8001ef6 <HAL_RCC_ClockConfig+0x182>
 8001ef0:	4b31      	ldr	r3, [pc, #196]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	e00d      	b.n	8001f12 <HAL_RCC_ClockConfig+0x19e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001efc:	fa93 f3a3 	rbit	r3, r3
 8001f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	2202      	movs	r2, #2
 8001f14:	61ba      	str	r2, [r7, #24]
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	617a      	str	r2, [r7, #20]
  return result;
 8001f1e:	697a      	ldr	r2, [r7, #20]
 8001f20:	fab2 f282 	clz	r2, r2
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f042 0220 	orr.w	r2, r2, #32
 8001f2a:	b2d2      	uxtb	r2, r2
 8001f2c:	f002 021f 	and.w	r2, r2, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e07a      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f40:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 0203 	bic.w	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	491a      	ldr	r1, [pc, #104]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f52:	f7fe fc47 	bl	80007e4 <HAL_GetTick>
 8001f56:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f58:	e00a      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5a:	f7fe fc43 	bl	80007e4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e062      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f70:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 020c 	and.w	r2, r3, #12
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d1eb      	bne.n	8001f5a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f82:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d215      	bcs.n	8001fbc <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f90:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 0207 	bic.w	r2, r3, #7
 8001f98:	4906      	ldr	r1, [pc, #24]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa0:	4b04      	ldr	r3, [pc, #16]	@ (8001fb4 <HAL_RCC_ClockConfig+0x240>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d006      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e041      	b.n	8002036 <HAL_RCC_ClockConfig+0x2c2>
 8001fb2:	bf00      	nop
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_RCC_ClockConfig+0x2cc>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	491a      	ldr	r1, [pc, #104]	@ (8002040 <HAL_RCC_ClockConfig+0x2cc>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0308 	and.w	r3, r3, #8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <HAL_RCC_ClockConfig+0x2cc>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4912      	ldr	r1, [pc, #72]	@ (8002040 <HAL_RCC_ClockConfig+0x2cc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ffa:	f000 f829 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8001ffe:	4601      	mov	r1, r0
 8002000:	4b0f      	ldr	r3, [pc, #60]	@ (8002040 <HAL_RCC_ClockConfig+0x2cc>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002008:	22f0      	movs	r2, #240	@ 0xf0
 800200a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	fa92 f2a2 	rbit	r2, r2
 8002012:	60fa      	str	r2, [r7, #12]
  return result;
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	40d3      	lsrs	r3, r2
 800201e:	4a09      	ldr	r2, [pc, #36]	@ (8002044 <HAL_RCC_ClockConfig+0x2d0>)
 8002020:	5cd3      	ldrb	r3, [r2, r3]
 8002022:	fa21 f303 	lsr.w	r3, r1, r3
 8002026:	4a08      	ldr	r2, [pc, #32]	@ (8002048 <HAL_RCC_ClockConfig+0x2d4>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_RCC_ClockConfig+0x2d8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fb94 	bl	800075c <HAL_InitTick>
  
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3778      	adds	r7, #120	@ 0x78
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	08003730 	.word	0x08003730
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800206a:	4b1e      	ldr	r3, [pc, #120]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	2b04      	cmp	r3, #4
 8002078:	d002      	beq.n	8002080 <HAL_RCC_GetSysClockFreq+0x30>
 800207a:	2b08      	cmp	r3, #8
 800207c:	d003      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x36>
 800207e:	e026      	b.n	80020ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002082:	613b      	str	r3, [r7, #16]
      break;
 8002084:	e026      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	4a14      	ldr	r2, [pc, #80]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020ac:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	fb02 f303 	mul.w	r3, r2, r3
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e004      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a0c      	ldr	r2, [pc, #48]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	613b      	str	r3, [r7, #16]
      break;
 80020cc:	e002      	b.n	80020d4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80020d0:	613b      	str	r3, [r7, #16]
      break;
 80020d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d4:	693b      	ldr	r3, [r7, #16]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	40021000 	.word	0x40021000
 80020e8:	007a1200 	.word	0x007a1200
 80020ec:	08003748 	.word	0x08003748
 80020f0:	08003758 	.word	0x08003758
 80020f4:	003d0900 	.word	0x003d0900

080020f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020fc:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_RCC_GetHCLKFreq+0x14>)
 80020fe:	681b      	ldr	r3, [r3, #0]
}
 8002100:	4618      	mov	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000000 	.word	0x20000000

08002110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002116:	f7ff ffef 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 800211a:	4601      	mov	r1, r0
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002124:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002128:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	fa92 f2a2 	rbit	r2, r2
 8002130:	603a      	str	r2, [r7, #0]
  return result;
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	fab2 f282 	clz	r2, r2
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	40d3      	lsrs	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <HAL_RCC_GetPCLK1Freq+0x40>)
 800213e:	5cd3      	ldrb	r3, [r2, r3]
 8002140:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003740 	.word	0x08003740

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800215a:	f7ff ffcd 	bl	80020f8 <HAL_RCC_GetHCLKFreq>
 800215e:	4601      	mov	r1, r0
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002168:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800216c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	fa92 f2a2 	rbit	r2, r2
 8002174:	603a      	str	r2, [r7, #0]
  return result;
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	fab2 f282 	clz	r2, r2
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	40d3      	lsrs	r3, r2
 8002180:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002182:	5cd3      	ldrb	r3, [r2, r3]
 8002184:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002188:	4618      	mov	r0, r3
 800218a:	3708      	adds	r7, #8
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40021000 	.word	0x40021000
 8002194:	08003740 	.word	0x08003740

08002198 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b092      	sub	sp, #72	@ 0x48
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80d2 	beq.w	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021bc:	4b4d      	ldr	r3, [pc, #308]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10e      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c8:	4b4a      	ldr	r3, [pc, #296]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	4a49      	ldr	r2, [pc, #292]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	61d3      	str	r3, [r2, #28]
 80021d4:	4b47      	ldr	r3, [pc, #284]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021e0:	2301      	movs	r3, #1
 80021e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	4b44      	ldr	r3, [pc, #272]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d118      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021f2:	4b41      	ldr	r3, [pc, #260]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a40      	ldr	r2, [pc, #256]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021fe:	f7fe faf1 	bl	80007e4 <HAL_GetTick>
 8002202:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	e008      	b.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002206:	f7fe faed 	bl	80007e4 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b64      	cmp	r3, #100	@ 0x64
 8002212:	d901      	bls.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e149      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x314>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	4b37      	ldr	r3, [pc, #220]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f0      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002224:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800222c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800222e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8082 	beq.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800223e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002240:	429a      	cmp	r2, r3
 8002242:	d07a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002244:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800224c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800224e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002252:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002256:	fa93 f3a3 	rbit	r3, r3
 800225a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800225c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	461a      	mov	r2, r3
 800226e:	2301      	movs	r3, #1
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002276:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	461a      	mov	r2, r3
 800228a:	4b1c      	ldr	r3, [pc, #112]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	2300      	movs	r3, #0
 8002294:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002296:	4a17      	ldr	r2, [pc, #92]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800229c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d049      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fa9d 	bl	80007e4 <HAL_GetTick>
 80022aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	e00a      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fa99 	bl	80007e4 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0f3      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x314>
 80022c4:	2302      	movs	r3, #2
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	2302      	movs	r3, #2
 80022d2:	623b      	str	r3, [r7, #32]
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	fa93 f3a3 	rbit	r3, r3
 80022da:	61fb      	str	r3, [r7, #28]
  return result;
 80022dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022de:	fab3 f383 	clz	r3, r3
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d108      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80022ee:	4b01      	ldr	r3, [pc, #4]	@ (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	e00d      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	10908100 	.word	0x10908100
 8002300:	2302      	movs	r3, #2
 8002302:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	617b      	str	r3, [r7, #20]
 800230c:	4b69      	ldr	r3, [pc, #420]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	2202      	movs	r2, #2
 8002312:	613a      	str	r2, [r7, #16]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	fa92 f2a2 	rbit	r2, r2
 800231a:	60fa      	str	r2, [r7, #12]
  return result;
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	fab2 f282 	clz	r2, r2
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	f002 021f 	and.w	r2, r2, #31
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f202 	lsl.w	r2, r1, r2
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0b9      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800233a:	4b5e      	ldr	r3, [pc, #376]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	495b      	ldr	r1, [pc, #364]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800234c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b57      	ldr	r3, [pc, #348]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	4a56      	ldr	r2, [pc, #344]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800235e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800236c:	4b51      	ldr	r3, [pc, #324]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	f023 0203 	bic.w	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494e      	ldr	r1, [pc, #312]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238a:	4b4a      	ldr	r3, [pc, #296]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f023 0210 	bic.w	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	4947      	ldr	r1, [pc, #284]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002398:	4313      	orrs	r3, r2
 800239a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80023a8:	4b42      	ldr	r3, [pc, #264]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	493f      	ldr	r1, [pc, #252]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	f023 0220 	bic.w	r2, r3, #32
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	4938      	ldr	r1, [pc, #224]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e4:	4b33      	ldr	r3, [pc, #204]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	4930      	ldr	r1, [pc, #192]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002402:	4b2c      	ldr	r3, [pc, #176]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4929      	ldr	r1, [pc, #164]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002420:	4b24      	ldr	r3, [pc, #144]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002424:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	4921      	ldr	r1, [pc, #132]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800242e:	4313      	orrs	r3, r2
 8002430:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800243e:	4b1d      	ldr	r3, [pc, #116]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	491a      	ldr	r1, [pc, #104]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800245c:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002460:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	4912      	ldr	r1, [pc, #72]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800247a:	4b0e      	ldr	r3, [pc, #56]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	490b      	ldr	r1, [pc, #44]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	4903      	ldr	r1, [pc, #12]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3748      	adds	r7, #72	@ 0x48
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e049      	b.n	800255e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe f822 	bl	8000528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f000 f9aa 	bl	8002850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e049      	b.n	800260c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d106      	bne.n	8002592 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 f841 	bl	8002614 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3304      	adds	r3, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4610      	mov	r0, r2
 80025a6:	f000 f953 	bl	8002850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002642:	2302      	movs	r3, #2
 8002644:	e0ff      	b.n	8002846 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b14      	cmp	r3, #20
 8002652:	f200 80f0 	bhi.w	8002836 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002656:	a201      	add	r2, pc, #4	@ (adr r2, 800265c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265c:	080026b1 	.word	0x080026b1
 8002660:	08002837 	.word	0x08002837
 8002664:	08002837 	.word	0x08002837
 8002668:	08002837 	.word	0x08002837
 800266c:	080026f1 	.word	0x080026f1
 8002670:	08002837 	.word	0x08002837
 8002674:	08002837 	.word	0x08002837
 8002678:	08002837 	.word	0x08002837
 800267c:	08002733 	.word	0x08002733
 8002680:	08002837 	.word	0x08002837
 8002684:	08002837 	.word	0x08002837
 8002688:	08002837 	.word	0x08002837
 800268c:	08002773 	.word	0x08002773
 8002690:	08002837 	.word	0x08002837
 8002694:	08002837 	.word	0x08002837
 8002698:	08002837 	.word	0x08002837
 800269c:	080027b5 	.word	0x080027b5
 80026a0:	08002837 	.word	0x08002837
 80026a4:	08002837 	.word	0x08002837
 80026a8:	08002837 	.word	0x08002837
 80026ac:	080027f5 	.word	0x080027f5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68b9      	ldr	r1, [r7, #8]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f944 	bl	8002944 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0208 	orr.w	r2, r2, #8
 80026ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0204 	bic.w	r2, r2, #4
 80026da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6999      	ldr	r1, [r3, #24]
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	691a      	ldr	r2, [r3, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	619a      	str	r2, [r3, #24]
      break;
 80026ee:	e0a5      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f9aa 	bl	8002a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800271a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6999      	ldr	r1, [r3, #24]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	021a      	lsls	r2, r3, #8
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	619a      	str	r2, [r3, #24]
      break;
 8002730:	e084      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68b9      	ldr	r1, [r7, #8]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fa09 	bl	8002b50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	69da      	ldr	r2, [r3, #28]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0208 	orr.w	r2, r2, #8
 800274c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0204 	bic.w	r2, r2, #4
 800275c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69d9      	ldr	r1, [r3, #28]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
      break;
 8002770:	e064      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fa67 	bl	8002c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69da      	ldr	r2, [r3, #28]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800278c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	69da      	ldr	r2, [r3, #28]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800279c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	69d9      	ldr	r1, [r3, #28]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	021a      	lsls	r2, r3, #8
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	61da      	str	r2, [r3, #28]
      break;
 80027b2:	e043      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 faaa 	bl	8002d14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0208 	orr.w	r2, r2, #8
 80027ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 0204 	bic.w	r2, r2, #4
 80027de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80027f2:	e023      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fae8 	bl	8002dd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	021a      	lsls	r2, r3, #8
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002834:	e002      	b.n	800283c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	75fb      	strb	r3, [r7, #23]
      break;
 800283a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002844:	7dfb      	ldrb	r3, [r7, #23]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop

08002850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <TIM_Base_SetConfig+0xe4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d003      	beq.n	8002870 <TIM_Base_SetConfig+0x20>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286e:	d108      	bne.n	8002882 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2b      	ldr	r2, [pc, #172]	@ (8002934 <TIM_Base_SetConfig+0xe4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00f      	beq.n	80028aa <TIM_Base_SetConfig+0x5a>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002890:	d00b      	beq.n	80028aa <TIM_Base_SetConfig+0x5a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a28      	ldr	r2, [pc, #160]	@ (8002938 <TIM_Base_SetConfig+0xe8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d007      	beq.n	80028aa <TIM_Base_SetConfig+0x5a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a27      	ldr	r2, [pc, #156]	@ (800293c <TIM_Base_SetConfig+0xec>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d003      	beq.n	80028aa <TIM_Base_SetConfig+0x5a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <TIM_Base_SetConfig+0xf0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d108      	bne.n	80028bc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a14      	ldr	r2, [pc, #80]	@ (8002934 <TIM_Base_SetConfig+0xe4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d00b      	beq.n	8002900 <TIM_Base_SetConfig+0xb0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a13      	ldr	r2, [pc, #76]	@ (8002938 <TIM_Base_SetConfig+0xe8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d007      	beq.n	8002900 <TIM_Base_SetConfig+0xb0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a12      	ldr	r2, [pc, #72]	@ (800293c <TIM_Base_SetConfig+0xec>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d003      	beq.n	8002900 <TIM_Base_SetConfig+0xb0>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a11      	ldr	r2, [pc, #68]	@ (8002940 <TIM_Base_SetConfig+0xf0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d103      	bne.n	8002908 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f023 0201 	bic.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	611a      	str	r2, [r3, #16]
  }
}
 8002926:	bf00      	nop
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40012c00 	.word	0x40012c00
 8002938:	40014000 	.word	0x40014000
 800293c:	40014400 	.word	0x40014400
 8002940:	40014800 	.word	0x40014800

08002944 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002944:	b480      	push	{r7}
 8002946:	b087      	sub	sp, #28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	f023 0201 	bic.w	r2, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002976:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0303 	bic.w	r3, r3, #3
 800297e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4313      	orrs	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 0302 	bic.w	r3, r3, #2
 8002990:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a28      	ldr	r2, [pc, #160]	@ (8002a40 <TIM_OC1_SetConfig+0xfc>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d00b      	beq.n	80029bc <TIM_OC1_SetConfig+0x78>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a27      	ldr	r2, [pc, #156]	@ (8002a44 <TIM_OC1_SetConfig+0x100>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d007      	beq.n	80029bc <TIM_OC1_SetConfig+0x78>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a26      	ldr	r2, [pc, #152]	@ (8002a48 <TIM_OC1_SetConfig+0x104>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d003      	beq.n	80029bc <TIM_OC1_SetConfig+0x78>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a25      	ldr	r2, [pc, #148]	@ (8002a4c <TIM_OC1_SetConfig+0x108>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d10c      	bne.n	80029d6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0308 	bic.w	r3, r3, #8
 80029c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <TIM_OC1_SetConfig+0xfc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <TIM_OC1_SetConfig+0xb2>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a18      	ldr	r2, [pc, #96]	@ (8002a44 <TIM_OC1_SetConfig+0x100>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d007      	beq.n	80029f6 <TIM_OC1_SetConfig+0xb2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a17      	ldr	r2, [pc, #92]	@ (8002a48 <TIM_OC1_SetConfig+0x104>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC1_SetConfig+0xb2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a16      	ldr	r2, [pc, #88]	@ (8002a4c <TIM_OC1_SetConfig+0x108>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d111      	bne.n	8002a1a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40014000 	.word	0x40014000
 8002a48:	40014400 	.word	0x40014400
 8002a4c:	40014800 	.word	0x40014800

08002a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f023 0210 	bic.w	r2, r3, #16
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0320 	bic.w	r3, r3, #32
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a24      	ldr	r2, [pc, #144]	@ (8002b40 <TIM_OC2_SetConfig+0xf0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10d      	bne.n	8002ad0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a1b      	ldr	r2, [pc, #108]	@ (8002b40 <TIM_OC2_SetConfig+0xf0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00b      	beq.n	8002af0 <TIM_OC2_SetConfig+0xa0>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a1a      	ldr	r2, [pc, #104]	@ (8002b44 <TIM_OC2_SetConfig+0xf4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d007      	beq.n	8002af0 <TIM_OC2_SetConfig+0xa0>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a19      	ldr	r2, [pc, #100]	@ (8002b48 <TIM_OC2_SetConfig+0xf8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_OC2_SetConfig+0xa0>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a18      	ldr	r2, [pc, #96]	@ (8002b4c <TIM_OC2_SetConfig+0xfc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d113      	bne.n	8002b18 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002af6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002afe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	621a      	str	r2, [r3, #32]
}
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800

08002b50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0303 	bic.w	r3, r3, #3
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a23      	ldr	r2, [pc, #140]	@ (8002c3c <TIM_OC3_SetConfig+0xec>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d10d      	bne.n	8002bce <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bcc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c3c <TIM_OC3_SetConfig+0xec>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <TIM_OC3_SetConfig+0x9e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a19      	ldr	r2, [pc, #100]	@ (8002c40 <TIM_OC3_SetConfig+0xf0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_OC3_SetConfig+0x9e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a18      	ldr	r2, [pc, #96]	@ (8002c44 <TIM_OC3_SetConfig+0xf4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_OC3_SetConfig+0x9e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <TIM_OC3_SetConfig+0xf8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d113      	bne.n	8002c16 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	621a      	str	r2, [r3, #32]
}
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40014400 	.word	0x40014400
 8002c48:	40014800 	.word	0x40014800

08002c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	031b      	lsls	r3, r3, #12
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a16      	ldr	r2, [pc, #88]	@ (8002d04 <TIM_OC4_SetConfig+0xb8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_OC4_SetConfig+0x7c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <TIM_OC4_SetConfig+0xbc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_OC4_SetConfig+0x7c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <TIM_OC4_SetConfig+0xc0>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_OC4_SetConfig+0x7c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a13      	ldr	r2, [pc, #76]	@ (8002d10 <TIM_OC4_SetConfig+0xc4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d109      	bne.n	8002cdc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400
 8002d10:	40014800 	.word	0x40014800

08002d14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002d58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	041b      	lsls	r3, r3, #16
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a15      	ldr	r2, [pc, #84]	@ (8002dc0 <TIM_OC5_SetConfig+0xac>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_OC5_SetConfig+0x72>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a14      	ldr	r2, [pc, #80]	@ (8002dc4 <TIM_OC5_SetConfig+0xb0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_OC5_SetConfig+0x72>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a13      	ldr	r2, [pc, #76]	@ (8002dc8 <TIM_OC5_SetConfig+0xb4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_OC5_SetConfig+0x72>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a12      	ldr	r2, [pc, #72]	@ (8002dcc <TIM_OC5_SetConfig+0xb8>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d109      	bne.n	8002d9a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	621a      	str	r2, [r3, #32]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40014000 	.word	0x40014000
 8002dc8:	40014400 	.word	0x40014400
 8002dcc:	40014800 	.word	0x40014800

08002dd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	051b      	lsls	r3, r3, #20
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a16      	ldr	r2, [pc, #88]	@ (8002e80 <TIM_OC6_SetConfig+0xb0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d00b      	beq.n	8002e44 <TIM_OC6_SetConfig+0x74>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <TIM_OC6_SetConfig+0xb4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d007      	beq.n	8002e44 <TIM_OC6_SetConfig+0x74>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <TIM_OC6_SetConfig+0xb8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d003      	beq.n	8002e44 <TIM_OC6_SetConfig+0x74>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a13      	ldr	r2, [pc, #76]	@ (8002e8c <TIM_OC6_SetConfig+0xbc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d109      	bne.n	8002e58 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	029b      	lsls	r3, r3, #10
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40012c00 	.word	0x40012c00
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800

08002e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e060      	b.n	8002f6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	041b      	lsls	r3, r3, #16
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a14      	ldr	r2, [pc, #80]	@ (8002f7c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d115      	bne.n	8002f5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	051b      	lsls	r3, r3, #20
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40012c00 	.word	0x40012c00

08002f80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e040      	b.n	8003014 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fb16 	bl	80005d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2224      	movs	r2, #36	@ 0x24
 8002fac:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f95e 	bl	8003288 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f825 	bl	800301c <UART_SetConfig>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e01b      	b.n	8003014 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9dd 	bl	80033cc <UART_CheckIdleState>
 8003012:	4603      	mov	r3, r0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	4b8a      	ldr	r3, [pc, #552]	@ (8003270 <UART_SetConfig+0x254>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6812      	ldr	r2, [r2, #0]
 800304e:	6979      	ldr	r1, [r7, #20]
 8003050:	430b      	orrs	r3, r1
 8003052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	430a      	orrs	r2, r1
 800308c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a78      	ldr	r2, [pc, #480]	@ (8003274 <UART_SetConfig+0x258>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d120      	bne.n	80030da <UART_SetConfig+0xbe>
 8003098:	4b77      	ldr	r3, [pc, #476]	@ (8003278 <UART_SetConfig+0x25c>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d817      	bhi.n	80030d4 <UART_SetConfig+0xb8>
 80030a4:	a201      	add	r2, pc, #4	@ (adr r2, 80030ac <UART_SetConfig+0x90>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c9 	.word	0x080030c9
 80030b4:	080030cf 	.word	0x080030cf
 80030b8:	080030c3 	.word	0x080030c3
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e01d      	b.n	80030fe <UART_SetConfig+0xe2>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e01a      	b.n	80030fe <UART_SetConfig+0xe2>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e017      	b.n	80030fe <UART_SetConfig+0xe2>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e014      	b.n	80030fe <UART_SetConfig+0xe2>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e011      	b.n	80030fe <UART_SetConfig+0xe2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a67      	ldr	r2, [pc, #412]	@ (800327c <UART_SetConfig+0x260>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d102      	bne.n	80030ea <UART_SetConfig+0xce>
 80030e4:	2300      	movs	r3, #0
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	e009      	b.n	80030fe <UART_SetConfig+0xe2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a64      	ldr	r2, [pc, #400]	@ (8003280 <UART_SetConfig+0x264>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d102      	bne.n	80030fa <UART_SetConfig+0xde>
 80030f4:	2300      	movs	r3, #0
 80030f6:	77fb      	strb	r3, [r7, #31]
 80030f8:	e001      	b.n	80030fe <UART_SetConfig+0xe2>
 80030fa:	2310      	movs	r3, #16
 80030fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003106:	d15a      	bne.n	80031be <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003108:	7ffb      	ldrb	r3, [r7, #31]
 800310a:	2b08      	cmp	r3, #8
 800310c:	d827      	bhi.n	800315e <UART_SetConfig+0x142>
 800310e:	a201      	add	r2, pc, #4	@ (adr r2, 8003114 <UART_SetConfig+0xf8>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003139 	.word	0x08003139
 8003118:	08003141 	.word	0x08003141
 800311c:	08003149 	.word	0x08003149
 8003120:	0800315f 	.word	0x0800315f
 8003124:	0800314f 	.word	0x0800314f
 8003128:	0800315f 	.word	0x0800315f
 800312c:	0800315f 	.word	0x0800315f
 8003130:	0800315f 	.word	0x0800315f
 8003134:	08003157 	.word	0x08003157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003138:	f7fe ffea 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 800313c:	61b8      	str	r0, [r7, #24]
        break;
 800313e:	e013      	b.n	8003168 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003140:	f7ff f808 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003144:	61b8      	str	r0, [r7, #24]
        break;
 8003146:	e00f      	b.n	8003168 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003148:	4b4e      	ldr	r3, [pc, #312]	@ (8003284 <UART_SetConfig+0x268>)
 800314a:	61bb      	str	r3, [r7, #24]
        break;
 800314c:	e00c      	b.n	8003168 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314e:	f7fe ff7f 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8003152:	61b8      	str	r0, [r7, #24]
        break;
 8003154:	e008      	b.n	8003168 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800315a:	61bb      	str	r3, [r7, #24]
        break;
 800315c:	e004      	b.n	8003168 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	77bb      	strb	r3, [r7, #30]
        break;
 8003166:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d074      	beq.n	8003258 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	005a      	lsls	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	441a      	add	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	d916      	bls.n	80031b8 <UART_SetConfig+0x19c>
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003190:	d212      	bcs.n	80031b8 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	b29b      	uxth	r3, r3
 8003196:	f023 030f 	bic.w	r3, r3, #15
 800319a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	085b      	lsrs	r3, r3, #1
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	89fa      	ldrh	r2, [r7, #14]
 80031b4:	60da      	str	r2, [r3, #12]
 80031b6:	e04f      	b.n	8003258 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	77bb      	strb	r3, [r7, #30]
 80031bc:	e04c      	b.n	8003258 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031be:	7ffb      	ldrb	r3, [r7, #31]
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d828      	bhi.n	8003216 <UART_SetConfig+0x1fa>
 80031c4:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <UART_SetConfig+0x1b0>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	080031f1 	.word	0x080031f1
 80031d0:	080031f9 	.word	0x080031f9
 80031d4:	08003201 	.word	0x08003201
 80031d8:	08003217 	.word	0x08003217
 80031dc:	08003207 	.word	0x08003207
 80031e0:	08003217 	.word	0x08003217
 80031e4:	08003217 	.word	0x08003217
 80031e8:	08003217 	.word	0x08003217
 80031ec:	0800320f 	.word	0x0800320f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7fe ff8e 	bl	8002110 <HAL_RCC_GetPCLK1Freq>
 80031f4:	61b8      	str	r0, [r7, #24]
        break;
 80031f6:	e013      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031f8:	f7fe ffac 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 80031fc:	61b8      	str	r0, [r7, #24]
        break;
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003200:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <UART_SetConfig+0x268>)
 8003202:	61bb      	str	r3, [r7, #24]
        break;
 8003204:	e00c      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003206:	f7fe ff23 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800320a:	61b8      	str	r0, [r7, #24]
        break;
 800320c:	e008      	b.n	8003220 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800320e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003212:	61bb      	str	r3, [r7, #24]
        break;
 8003214:	e004      	b.n	8003220 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	77bb      	strb	r3, [r7, #30]
        break;
 800321e:	bf00      	nop
    }

    if (pclk != 0U)
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d018      	beq.n	8003258 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	085a      	lsrs	r2, r3, #1
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	441a      	add	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	2b0f      	cmp	r3, #15
 800323e:	d909      	bls.n	8003254 <UART_SetConfig+0x238>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003246:	d205      	bcs.n	8003254 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	e001      	b.n	8003258 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003264:	7fbb      	ldrb	r3, [r7, #30]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	efff69f3 	.word	0xefff69f3
 8003274:	40013800 	.word	0x40013800
 8003278:	40021000 	.word	0x40021000
 800327c:	40004400 	.word	0x40004400
 8003280:	40004800 	.word	0x40004800
 8003284:	007a1200 	.word	0x007a1200

08003288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b00      	cmp	r3, #0
 8003366:	d01a      	beq.n	800339e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003386:	d10a      	bne.n	800339e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
  }
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b098      	sub	sp, #96	@ 0x60
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033dc:	f7fd fa02 	bl	80007e4 <HAL_GetTick>
 80033e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d12e      	bne.n	800344e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f8:	2200      	movs	r2, #0
 80033fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f88c 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d021      	beq.n	800344e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003412:	e853 3f00 	ldrex	r3, [r3]
 8003416:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800341e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	461a      	mov	r2, r3
 8003426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003428:	647b      	str	r3, [r7, #68]	@ 0x44
 800342a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800342e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e6      	bne.n	800340a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e062      	b.n	8003514 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b04      	cmp	r3, #4
 800345a:	d149      	bne.n	80034f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800345c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003460:	9300      	str	r3, [sp, #0]
 8003462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003464:	2200      	movs	r2, #0
 8003466:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f856 	bl	800351c <UART_WaitOnFlagUntilTimeout>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d03c      	beq.n	80034f0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	e853 3f00 	ldrex	r3, [r3]
 8003482:	623b      	str	r3, [r7, #32]
   return(result);
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	461a      	mov	r2, r3
 8003492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003498:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800349a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349c:	e841 2300 	strex	r3, r2, [r1]
 80034a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1e6      	bne.n	8003476 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3308      	adds	r3, #8
 80034ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	e853 3f00 	ldrex	r3, [r3]
 80034b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f023 0301 	bic.w	r3, r3, #1
 80034be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3308      	adds	r3, #8
 80034c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c8:	61fa      	str	r2, [r7, #28]
 80034ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	69b9      	ldr	r1, [r7, #24]
 80034ce:	69fa      	ldr	r2, [r7, #28]
 80034d0:	e841 2300 	strex	r3, r2, [r1]
 80034d4:	617b      	str	r3, [r7, #20]
   return(result);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e5      	bne.n	80034a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2220      	movs	r2, #32
 80034e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e011      	b.n	8003514 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3758      	adds	r7, #88	@ 0x58
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352c:	e04f      	b.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d04b      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fd f955 	bl	80007e4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e04e      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d037      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2b80      	cmp	r3, #128	@ 0x80
 8003562:	d034      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b40      	cmp	r3, #64	@ 0x40
 8003568:	d031      	beq.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b08      	cmp	r3, #8
 8003576:	d110      	bne.n	800359a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2208      	movs	r2, #8
 800357e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 f838 	bl	80035f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2208      	movs	r2, #8
 800358a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e029      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035a8:	d111      	bne.n	80035ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f81e 	bl	80035f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e00f      	b.n	80035ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	429a      	cmp	r2, r3
 80035dc:	bf0c      	ite	eq
 80035de:	2301      	moveq	r3, #1
 80035e0:	2300      	movne	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	461a      	mov	r2, r3
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d0a0      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b095      	sub	sp, #84	@ 0x54
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003606:	e853 3f00 	ldrex	r3, [r3]
 800360a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800360c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800361c:	643b      	str	r3, [r7, #64]	@ 0x40
 800361e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003620:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003622:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003624:	e841 2300 	strex	r3, r2, [r1]
 8003628:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1e6      	bne.n	80035fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	3308      	adds	r3, #8
 800364e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003650:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e5      	bne.n	8003630 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003668:	2b01      	cmp	r3, #1
 800366a:	d118      	bne.n	800369e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	60bb      	str	r3, [r7, #8]
   return(result);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f023 0310 	bic.w	r3, r3, #16
 8003680:	647b      	str	r3, [r7, #68]	@ 0x44
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6979      	ldr	r1, [r7, #20]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	613b      	str	r3, [r7, #16]
   return(result);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e6      	bne.n	800366c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2220      	movs	r2, #32
 80036a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036b2:	bf00      	nop
 80036b4:	3754      	adds	r7, #84	@ 0x54
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <memset>:
 80036be:	4402      	add	r2, r0
 80036c0:	4603      	mov	r3, r0
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d100      	bne.n	80036c8 <memset+0xa>
 80036c6:	4770      	bx	lr
 80036c8:	f803 1b01 	strb.w	r1, [r3], #1
 80036cc:	e7f9      	b.n	80036c2 <memset+0x4>
	...

080036d0 <__libc_init_array>:
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003708 <__libc_init_array+0x38>)
 80036d4:	4c0d      	ldr	r4, [pc, #52]	@ (800370c <__libc_init_array+0x3c>)
 80036d6:	1b64      	subs	r4, r4, r5
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	2600      	movs	r6, #0
 80036dc:	42a6      	cmp	r6, r4
 80036de:	d109      	bne.n	80036f4 <__libc_init_array+0x24>
 80036e0:	4d0b      	ldr	r5, [pc, #44]	@ (8003710 <__libc_init_array+0x40>)
 80036e2:	4c0c      	ldr	r4, [pc, #48]	@ (8003714 <__libc_init_array+0x44>)
 80036e4:	f000 f818 	bl	8003718 <_init>
 80036e8:	1b64      	subs	r4, r4, r5
 80036ea:	10a4      	asrs	r4, r4, #2
 80036ec:	2600      	movs	r6, #0
 80036ee:	42a6      	cmp	r6, r4
 80036f0:	d105      	bne.n	80036fe <__libc_init_array+0x2e>
 80036f2:	bd70      	pop	{r4, r5, r6, pc}
 80036f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f8:	4798      	blx	r3
 80036fa:	3601      	adds	r6, #1
 80036fc:	e7ee      	b.n	80036dc <__libc_init_array+0xc>
 80036fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003702:	4798      	blx	r3
 8003704:	3601      	adds	r6, #1
 8003706:	e7f2      	b.n	80036ee <__libc_init_array+0x1e>
 8003708:	08003768 	.word	0x08003768
 800370c:	08003768 	.word	0x08003768
 8003710:	08003768 	.word	0x08003768
 8003714:	0800376c 	.word	0x0800376c

08003718 <_init>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr

08003724 <_fini>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	bf00      	nop
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr
